{
  "audit-report": {
    "description": "Comprehensive security audit of the selected Solidity smart contract code",
    "prompt": "Please analyze the selected Solidity code and generate a detailed audit report in Markdown format covering: \n\n* **Summary of the contract functionality** \n* **Analysis of potential security vulnerabilities** \n  * Reentrancy \n  * Integer overflow/underflow \n  * Access control & authorization \n  * Logic errors \n  * External contract calls \n  * Denial of service \n  * Front running \n  * etc. \n\n* **For each identified vulnerability or security concern provide:** \n  * Description of the issue \n  * Severity level \n  * Potential consequences \n  * Recommended mitigations/fixes \n\n* **Where relevant, reference the SWC Registry to classify the vulnerabilities. Format the report in a clear and easy-to-understand manner for the developer to address the findings.**",
    "context": {
      "currentDir": true,
      "selection": true
    }
  },
  "commit-message": {
    "description": "Commit message for current changes",
    "prompt": "Suggest an informative commit message by summarizing code changes from the shared command output. The commit message should follow the conventional commit format and provide meaningful context for future readers.",
    "context": {
      "selection": true,
      "command": "git diff --cached"
    }
  },
  "truffle-test": {
    "descriptio": "Run Truffle tests on the current contract",
    "prompt": "please create a javascript file with all the functions of the code of the selected smart contract, to carry out the respective test, to detect possible errors within the logica and its operation, without ignoring any of them, providing a complete and understandable test file.",
    "context": {
      "currentDir": true,
      "selection": true
    }
  },
  "readme": {
    "description": "Readme for current dir",
    "prompt": "Write a detailed README.md file to document the code located in the same directory as my current selection. Summarize what the code in this directory is meant to accomplish. Explain the key files, functions, classes, and features. Use Markdown formatting for headings, code blocks, lists, etc. to make the it organized and readable. Aim for a beginner-friendly explanation that gives a developer unfamiliar with the code a good starting point to understand it. Make sure to include: - Overview of directory purpose - Functionality explanations - Relevant diagrams or visuals if helpful. Write the README content clearly and concisely using complete sentences and paragraphs based on the shared context. Use proper spelling, grammar, and punctuation throughout. Surround your full README text with triple backticks so it renders properly as a code block. Do not make assumptions or fabricating additional details.",
    "context": {
      "currentDir": true,
      "selection": true
    }
  }
}